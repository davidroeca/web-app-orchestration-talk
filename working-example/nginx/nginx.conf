user nginx;
worker_processes 1;
pid /run/nginx.pid;

events {
  # The default
  worker_connections 512;
}

http {

  # Resolve DNS via the docker dns server
  resolver 127.0.0.11;

  error_log /var/log/nginx/error.log;
  access_log /var/log/nginx/access.log;

  server {
    listen 34341;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    location / {
      # By setting a target variable, nginx can run without all of the services
      # up. This is nice for development
      set $target "http://app1:34341"; # app is resolved via docker's dns server
      proxy_pass $target;
    }
  }

  server {
    listen 5001;
    server_name localhost;

    #proxy_cache_bypass $http_upgrade;
    #proxy_set_header X-Forwarded-For $remote_addr:$remote_port;
    #proxy_set_header X-Forwarded-Host $remote_addr;
    #proxy_set_header X-Forwarded-Port $remote_port;

    location /wps {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      set $target "http://app3:5001"; # app is resolved via docker's dns server
      proxy_pass $target;
    }
  }

  server {
    listen 80;
    server_name localhost;

    proxy_redirect off;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;

    location /api {
      set $target "http://api:5000";
      proxy_pass $target;
    }

    location /app1 {
      set $target "http://app1:8080";
      proxy_pass $target;
    }

    location /app2 {
      set $target "http://app2:3000";
      proxy_pass $target;
    }

    location /app3 {
      set $target "http://app3:5001";
      proxy_pass $target;
    }
  }
}
